def webappPath = "${project.projectDir}/webapp"

task copyDist(type: Copy) {
    def fromDir = "${webappPath}/build"
    def toDir = "${project.projectDir}/build/dependency/BOOT-INF/classes/static/."
    from fromDir
    into toDir
    inputs.dir(fromDir)
    outputs.dir(toDir)
    mustRunAfter unpack
    dependsOn "buildWebapp"
}

task installWebappDeps(type: Exec) {
    onlyIf { System.getenv("SKIP_WEBAPP_BUILD") != "true" }
    commandLine "npm", "ci"
    workingDir = webappPath
    inputs.file("${project.projectDir}/webapp/package.json")
    inputs.file("${project.projectDir}/webapp/package-lock.json")
    outputs.dir("${project.projectDir}/webapp/node_modules")
}

task buildWebapp(type: Exec) {
    onlyIf { System.getenv("SKIP_WEBAPP_BUILD") != "true" }
    commandLine "npm", "run", "build"
    workingDir = webappPath
    inputs.dir("${project.projectDir}/webapp/")
    outputs.dir("${project.projectDir}/webapp/build/")
    dependsOn "installWebappDeps", "updateStaticTranslations"
}

task createBuildDir() {
    File directory = new File(buildDir as String)
    if (!directory.exists()) {
        directory.mkdir()
    }
}

task updateStaticTranslations() {
    onlyIf { System.getenv("SKIP_WEBAPP_BUILD") != "true" }
    def tolgeeApiKey = System.env.TOLGEE_API_KEY
    def tolgeeApiUrl = System.env.TOLGEE_API_URL
    onlyIf { tolgeeApiUrl != null && tolgeeApiUrl != "" }
    doFirst {
        def command = "curl $tolgeeApiUrl/api/repository/export/jsonZip?ak=$tolgeeApiKey --output $buildDir/translations.zip"
        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        Process process = builder.start()
        process.waitFor()
        println process.err.text
        println process.text
    }
    doLast {
        copy {
            def zipFile = file("$buildDir/translations.zip")
            def outputDir = file("$webappPath/src/i18n")

            from zipTree(zipFile)
            into outputDir
        }
    }
    dependsOn(createBuildDir)
}
